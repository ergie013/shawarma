{"ast":null,"code":"export var calculateDistance = function calculateDistance(lon1, lat1, lon2, lat2) {\n  function toRad(x) {\n    return x * Math.PI / 180;\n  }\n\n  var R = 6371; // km\n\n  var x1 = lat2 - lat1;\n  var dLat = toRad(x1);\n  var x2 = lon2 - lon1;\n  var dLon = toRad(x2);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var distance = R * c;\n  return distance;\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/shawarma/src/components/helpers/calculateDistance.js"],"names":["calculateDistance","lon1","lat1","lon2","lat2","toRad","x","Math","PI","R","x1","dLat","x2","dLon","a","sin","cos","c","atan2","sqrt","distance"],"mappings":"AAAA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAA4B;AACzD,WAASC,KAAT,CAAeC,CAAf,EAAkB;AACd,WAAQA,CAAC,GAAGC,IAAI,CAACC,EAAV,GAAgB,GAAvB;AACH;;AAED,MAAIC,CAAC,GAAG,IAAR,CALyD,CAK3C;;AAEd,MAAIC,EAAE,GAAGN,IAAI,GAAGF,IAAhB;AACA,MAAIS,IAAI,GAAGN,KAAK,CAACK,EAAD,CAAhB;AACA,MAAIE,EAAE,GAAGT,IAAI,GAAGF,IAAhB;AACA,MAAIY,IAAI,GAAGR,KAAK,CAACO,EAAD,CAAhB;AACA,MAAIE,CAAC,GAAGP,IAAI,CAACQ,GAAL,CAASJ,IAAI,GAAG,CAAhB,IAAqBJ,IAAI,CAACQ,GAAL,CAASJ,IAAI,GAAG,CAAhB,CAArB,GAA0CJ,IAAI,CAACS,GAAL,CAASX,KAAK,CAACH,IAAD,CAAd,IAAwBK,IAAI,CAACS,GAAL,CAASX,KAAK,CAACD,IAAD,CAAd,CAAxB,GAAgDG,IAAI,CAACQ,GAAL,CAASF,IAAI,GAAG,CAAhB,CAAhD,GAAqEN,IAAI,CAACQ,GAAL,CAASF,IAAI,GAAG,CAAhB,CAAvH;AACA,MAAII,CAAC,GAAG,IAAIV,IAAI,CAACW,KAAL,CAAWX,IAAI,CAACY,IAAL,CAAUL,CAAV,CAAX,EAAyBP,IAAI,CAACY,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAZ;AACA,MAAIM,QAAQ,GAAGX,CAAC,GAAGQ,CAAnB;AACA,SAAOG,QAAP;AACH,CAfM","sourcesContent":["export const calculateDistance = (lon1, lat1, lon2, lat2) => {\r\n    function toRad(x) {\r\n        return (x * Math.PI) / 180;\r\n    }\r\n\r\n    let R = 6371; // km\r\n\r\n    let x1 = lat2 - lat1;\r\n    let dLat = toRad(x1);\r\n    let x2 = lon2 - lon1;\r\n    let dLon = toRad(x2);\r\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let distance = R * c;\r\n    return distance;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}