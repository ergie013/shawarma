{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean( // ! uncomment this later\n// window.location.hostname === \"localhost\" ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log(\"PWA Activated\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n\n      navigator.serviceWorker.ready.then(function () {\n        console.log(\"SW & event listener registered\"); //register event listener for pushnotifications\n        // navigator.serviceWorker.addEventListener(\"message\", message =>\n        //     console.log(\n        //         message.data[\"firebase-messaging-msg-data\"].data\n        //     )\n        // );\n      });\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed...\n            console.log(\"Skiping wait..\");\n            installingWorker.postMessage({\n              action: \"skipWaiting\"\n            });\n            window.location.reload(); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\"); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get(\"content-type\");\n\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/shawarma/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","postMessage","action","reload","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\t// ! uncomment this later\r\n\t// window.location.hostname === \"localhost\" ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\nexport function register(config) {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\"PWA Activated\");\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\tconsole.log(\"SW & event listener registered\");\r\n\r\n\t\t\t\t//register event listener for pushnotifications\r\n\t\t\t\t// navigator.serviceWorker.addEventListener(\"message\", message =>\r\n\t\t\t\t//     console.log(\r\n\t\t\t\t//         message.data[\"firebase-messaging-msg-data\"].data\r\n\t\t\t\t//     )\r\n\t\t\t\t// );\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed...\r\n\t\t\t\t\t\t\tconsole.log(\"Skiping wait..\");\r\n\t\t\t\t\t\t\tinstallingWorker.postMessage({\r\n\t\t\t\t\t\t\t\taction: \"skipWaiting\",\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\r\n\t\t});\r\n}\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}