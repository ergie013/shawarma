{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nvar SCRIPT_ID = 'react-google-places-autocomplete';\n\nvar injectScript = function injectScript(apiKey) {\n  var script = document.createElement('script');\n  script.id = SCRIPT_ID;\n  script.type = 'text/javascript';\n  script.src = \"https://maps.googleapis.com/maps/api/js?key=\" + apiKey + \"&libraries=places\";\n  document.body.appendChild(script);\n};\n\nvar removeScript = function removeScript() {\n  var script = document.getElementById(SCRIPT_ID);\n\n  if (script) {\n    document.body.removeChild(script);\n  }\n};\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar autocompletionRequestBuilder = function autocompletionRequestBuilder(autocompletionRequest) {\n  var res = _extends({}, autocompletionRequest);\n\n  if (autocompletionRequest.bounds) {\n    res.bounds = _construct(google.maps.LatLngBounds, autocompletionRequest.bounds);\n  }\n\n  if (autocompletionRequest.location) {\n    res.location = new google.maps.LatLng(autocompletionRequest.location);\n  }\n\n  return res;\n};\n/* eslint-disable */\n\n\nvar debounce = function debounce(callback, timeout) {\n  var d, e;\n  return function () {\n    function helper() {\n      d = null, e = callback.apply(thisRef, argumentsRef);\n    }\n\n    var thisRef = this,\n        argumentsRef = arguments;\n    return clearTimeout(d), d = setTimeout(helper, timeout), !d && (e = callback.apply(thisRef, argumentsRef)), e;\n  };\n};\n\nvar latLngBoundsType = function latLngBoundsType(props, propName, componentName) {\n  var prop = props[propName];\n\n  if (!prop) {\n    return null;\n  }\n\n  if (Array.isArray(prop) && prop.length === 2 && prop.every(function (value) {\n    return Object.keys(value).length === 2 && value.hasOwnProperty('lat') && value.hasOwnProperty('lng') // eslint-disable-line no-prototype-builtins\n    && Number(value.lat) && Number(value.lng);\n  })) {\n    return null;\n  }\n\n  return new Error(\"Invalid prop `\" + propName + \"` supplied to `\" + componentName + \"`. Validation failed.\");\n};\n\nvar componentRestrictionsType = PropTypes.shape({\n  country: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\nvar latLngType = PropTypes.shape({\n  lat: PropTypes.number,\n  lng: PropTypes.number\n});\nvar autocompletionRequestType = PropTypes.shape({\n  bounds: latLngBoundsType,\n  componentRestrictions: componentRestrictionsType,\n  location: latLngType,\n  offset: PropTypes.number,\n  radius: PropTypes.number,\n  types: PropTypes.arrayOf(PropTypes.string)\n});\nvar suggestionClassNamesType = PropTypes.shape({\n  container: PropTypes.string,\n  suggestion: PropTypes.string,\n  suggestionActive: PropTypes.string\n});\nvar suggestionStylesType = PropTypes.shape({\n  container: PropTypes.object,\n  suggestion: PropTypes.object\n});\n\nfunction _extends$1() {\n  _extends$1 = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends$1.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar GooglePlacesAutocomplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(GooglePlacesAutocomplete, _React$Component); // eslint-disable-line react/destructuring-assignment\n\n\n  function GooglePlacesAutocomplete(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchSuggestions\", debounce(function (value) {\n      var _this$props = _this.props,\n          autocompletionRequest = _this$props.autocompletionRequest,\n          withSessionToken = _this$props.withSessionToken;\n      var sessionToken = _this.state.sessionToken;\n\n      var autocompletionReq = _extends$1({}, autocompletionRequest);\n\n      if (withSessionToken && sessionToken) autocompletionReq.sessionToken = sessionToken;\n\n      _this.setState({\n        loading: true\n      });\n\n      _this.placesService.getPlacePredictions(_extends$1({}, autocompletionRequestBuilder(autocompletionReq), {\n        input: value\n      }), _this.fetchSuggestionsCallback);\n    }, _this.props.debounce));\n\n    _defineProperty(_assertThisInitialized(_this), \"initalizeService\", function () {\n      if (!window.google) {\n        console.error('[react-google-places-autocomplete]: Google script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(_this.initalizeService, 500);\n        return;\n      }\n\n      if (!window.google.maps) {\n        console.error('[react-google-places-autocomplete]: Google maps script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(_this.initalizeService, 500);\n        return;\n      }\n\n      if (!window.google.maps.places) {\n        console.error('[react-google-places-autocomplete]: Google maps places script not loaded'); // eslint-disable-line no-console\n\n        setTimeout(_this.initializeService, 500);\n        return;\n      }\n\n      _this.placesService = new window.google.maps.places.AutocompleteService();\n\n      _this.setState({\n        placesServiceStatus: window.google.maps.places.PlacesServiceStatus.OK\n      });\n\n      _this.generateSessionToken();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateSessionToken\", function () {\n      var sessionToken = new google.maps.places.AutocompleteSessionToken();\n\n      _this.setState({\n        sessionToken: sessionToken\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (ev) {\n      var idPrefix = _this.props.idPrefix;\n\n      if (!ev.target.id.includes(idPrefix + \"-google-places-autocomplete\")) {\n        _this.clearSuggestions();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeValue\", function (value) {\n      _this.setState({\n        value: value\n      });\n\n      if (value.length > 0) {\n        _this.fetchSuggestions(value);\n      } else {\n        _this.setState({\n          suggestions: []\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionSelect\", function (suggestion, ev) {\n      if (ev === void 0) {\n        ev = null;\n      }\n\n      if (ev) ev.stopPropagation();\n      var onSelect = _this.props.onSelect;\n\n      _this.setState({\n        activeSuggestion: null,\n        suggestions: [],\n        value: suggestion.description\n      });\n\n      _this.generateSessionToken();\n\n      onSelect(suggestion);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchSuggestionsCallback\", function (suggestions, status) {\n      var placesServiceStatus = _this.state.placesServiceStatus;\n\n      _this.setState({\n        loading: false,\n        suggestions: suggestions || []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          suggestions = _this$state.suggestions;\n\n      switch (event.key) {\n        case 'Enter':\n          event.preventDefault();\n          if (activeSuggestion !== null) _this.onSuggestionSelect(suggestions[activeSuggestion]);\n          break;\n\n        case 'ArrowDown':\n          _this.changeActiveSuggestion(1);\n\n          break;\n\n        case 'ArrowUp':\n          _this.changeActiveSuggestion(-1);\n\n          break;\n\n        case 'Escape':\n          _this.clearSuggestions();\n\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearSuggestions\", function () {\n      _this.setState({\n        activeSuggestion: null,\n        suggestions: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderInput\", function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          value = _assertThisInitialize.state.value,\n          _assertThisInitialize2 = _assertThisInitialize.props,\n          idPrefix = _assertThisInitialize2.idPrefix,\n          inputClassName = _assertThisInitialize2.inputClassName,\n          inputStyle = _assertThisInitialize2.inputStyle,\n          placeholder = _assertThisInitialize2.placeholder,\n          renderInput = _assertThisInitialize2.renderInput,\n          required = _assertThisInitialize2.required,\n          disabled = _assertThisInitialize2.disabled;\n\n      if (renderInput) {\n        return renderInput({\n          autoComplete: 'off',\n          id: (idPrefix ? idPrefix + \"-\" : '') + \"react-google-places-autocomplete-input\",\n          value: value,\n          onChange: function onChange(_ref) {\n            var target = _ref.target;\n            return _this.changeValue(target.value);\n          },\n          onKeyDown: _this.handleKeyDown,\n          type: 'text',\n          placeholder: placeholder,\n          required: required,\n          disabled: disabled\n        });\n      }\n\n      return React.createElement(\"input\", {\n        autoComplete: \"off\",\n        className: inputClassName || 'google-places-autocomplete__input',\n        id: (idPrefix ? idPrefix + \"-\" : '') + \"react-google-places-autocomplete-input\",\n        onChange: function onChange(_ref2) {\n          var target = _ref2.target;\n          return _this.changeValue(target.value);\n        },\n        onKeyDown: _this.handleKeyDown,\n        placeholder: placeholder,\n        style: inputStyle,\n        type: \"text\",\n        value: value,\n        required: required,\n        disabled: disabled\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLoader\", function () {\n      var loader = _this.props.loader;\n      if (loader) return loader;\n      return React.createElement(\"div\", {\n        className: \"google-places-autocomplete__suggestions-container\"\n      }, React.createElement(\"div\", {\n        className: \"google-places-autocomplete__suggestions\"\n      }, \"Loading...\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSuggestions\", function () {\n      var _assertThisInitialize3 = _assertThisInitialized(_this),\n          _assertThisInitialize4 = _assertThisInitialize3.state,\n          activeSuggestion = _assertThisInitialize4.activeSuggestion,\n          suggestions = _assertThisInitialize4.suggestions,\n          _assertThisInitialize5 = _assertThisInitialize3.props,\n          idPrefix = _assertThisInitialize5.idPrefix,\n          renderSuggestions = _assertThisInitialize5.renderSuggestions,\n          suggestionsClassNames = _assertThisInitialize5.suggestionsClassNames,\n          suggestionsStyles = _assertThisInitialize5.suggestionsStyles;\n\n      if (suggestions.length === 0) return null;\n\n      if (renderSuggestions) {\n        return renderSuggestions(activeSuggestion, suggestions, _this.onSuggestionSelect);\n      }\n\n      return React.createElement(\"div\", {\n        id: idPrefix + \"-google-places-suggestions-container\",\n        className: suggestionsClassNames.container || 'google-places-autocomplete__suggestions-container',\n        style: suggestionsStyles.container\n      }, suggestions.map(function (suggestion, index) {\n        return React.createElement(\"div\", {\n          id: idPrefix + \"-google-places-autocomplete-suggestion--\" + index,\n          key: suggestion.id,\n          className: (suggestionsClassNames.suggestion || 'google-places-autocomplete__suggestion') + \" \" + (activeSuggestion === index ? suggestionsClassNames.suggestionActive || 'google-places-autocomplete__suggestion--active' : ''),\n          style: suggestionsStyles.suggestion,\n          onClick: function onClick(event) {\n            return _this.onSuggestionSelect(suggestion, event);\n          },\n          role: \"presentation\"\n        }, suggestion.description);\n      }));\n    });\n\n    _this.state = {\n      activeSuggestion: null,\n      loading: false,\n      placesServiceStatus: null,\n      sessionToken: null,\n      suggestions: [],\n      value: props.initialValue\n    };\n    return _this;\n  }\n\n  var _proto = GooglePlacesAutocomplete.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var apiKey = this.props.apiKey;\n\n    if (apiKey) {\n      injectScript(apiKey);\n    }\n\n    this.initalizeService();\n    document.addEventListener('click', this.handleClick);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    removeScript();\n    document.removeEventListener('click', this.handleClick);\n  };\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    // eslint-disable-line\n    var initialValue = this.props.initialValue;\n\n    if (nextProps.initialValue !== initialValue) {\n      this.setState({\n        value: nextProps.initialValue\n      });\n    }\n  };\n\n  _proto.changeActiveSuggestion = function changeActiveSuggestion(direction) {\n    var suggs = this.state.suggestions;\n    if (suggs.length === 0) return;\n\n    switch (direction) {\n      case 1:\n        this.setState(function (_ref3) {\n          var activeSuggestion = _ref3.activeSuggestion,\n              suggestions = _ref3.suggestions;\n          if (activeSuggestion === null || activeSuggestion === suggestions.length - 1) return {\n            activeSuggestion: 0\n          };\n          return {\n            activeSuggestion: activeSuggestion + 1\n          };\n        });\n        break;\n\n      case -1:\n        this.setState(function (_ref4) {\n          var activeSuggestion = _ref4.activeSuggestion,\n              suggestions = _ref4.suggestions;\n          if (!activeSuggestion) return {\n            activeSuggestion: suggestions.length - 1\n          };\n          return {\n            activeSuggestion: activeSuggestion - 1\n          };\n        });\n        break;\n    }\n  };\n\n  _proto.render = function render() {\n    var loading = this.state.loading;\n    return React.createElement(\"div\", {\n      className: \"google-places-autocomplete\"\n    }, this.renderInput(), loading ? this.renderLoader() : this.renderSuggestions());\n  };\n\n  return GooglePlacesAutocomplete;\n}(React.Component);\n\nGooglePlacesAutocomplete.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  apiKey: PropTypes.string,\n  autocompletionRequest: autocompletionRequestType,\n  debounce: PropTypes.number,\n  disabled: PropTypes.bool,\n  idPrefix: PropTypes.string,\n  initialValue: PropTypes.string,\n  inputClassName: PropTypes.string,\n  inputStyle: PropTypes.object,\n  loader: PropTypes.node,\n  onSelect: PropTypes.func,\n  placeholder: PropTypes.string,\n  renderInput: PropTypes.func,\n  renderSuggestions: PropTypes.func,\n  required: PropTypes.bool,\n  suggestionsClassNames: suggestionClassNamesType,\n  suggestionsStyles: suggestionStylesType,\n  withSessionToken: PropTypes.bool\n} : {};\nGooglePlacesAutocomplete.defaultProps = {\n  apiKey: '',\n  autocompletionRequest: {},\n  debounce: 300,\n  disabled: false,\n  idPrefix: '',\n  initialValue: '',\n  inputClassName: '',\n  inputStyle: {},\n  loader: null,\n  onSelect: function onSelect() {},\n  placeholder: 'Address...',\n  renderInput: undefined,\n  renderSuggestions: undefined,\n  required: false,\n  suggestionsClassNames: {\n    container: '',\n    suggestion: '',\n    suggestionActive: ''\n  },\n  suggestionsStyles: {\n    container: {},\n    suggestion: {}\n  },\n  withSessionToken: false\n};\n\nvar geocodeByAddress = function geocodeByAddress(address) {\n  var geocoder = new window.google.maps.Geocoder();\n  var OK = window.google.maps.GeocoderStatus.OK;\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({\n      address: address\n    }, function (results, status) {\n      if (status !== OK) {\n        return reject(status);\n      }\n\n      return resolve(results);\n    });\n  });\n};\n\nvar getLatLng = function getLatLng(result) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var latLng = {\n        lat: result.geometry.location.lat(),\n        lng: result.geometry.location.lng()\n      };\n      return resolve(latLng);\n    } catch (e) {\n      return reject(e);\n    }\n  });\n};\n\nvar geocodeByPlaceId = function geocodeByPlaceId(placeId) {\n  var geocoder = new window.google.maps.Geocoder();\n  var OK = window.google.maps.GeocoderStatus.OK;\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode({\n      placeId: placeId\n    }, function (results, status) {\n      if (status !== OK) {\n        return reject(status);\n      }\n\n      return resolve(results);\n    });\n  });\n};\n\nexport default GooglePlacesAutocomplete;\nexport { geocodeByAddress, geocodeByPlaceId, getLatLng };","map":null,"metadata":{},"sourceType":"module"}