{"ast":null,"code":"import _regeneratorRuntime from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/lampp/htdocs/shawarma/src/components/CheckVersion/index.js\";\nimport React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport { getSettings } from \"../../services/settings/actions\";\nimport { connect } from \"react-redux\";\nimport { getSingleLanguageData, getAllLanguages } from \"../../services/languages/actions\";\nimport { logoutUser } from \"../../services/user/actions\";\n\nvar CheckVersion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CheckVersion, _Component);\n\n  function CheckVersion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CheckVersion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckVersion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      updating: false\n    };\n    return _this;\n  }\n\n  _createClass(CheckVersion, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Axios.get(\"/version.json\").then(function (response) {\n        //getting new data from version.json file\n        var forceNewSettingsServerVersion = response.data.forceNewSettingsVersion;\n        var forceCacheClearServerVersion = response.data.forceCacheClearVersion; // const forceLogoutAllCustomers = response.data.forceLogoutAllCustomers;\n        //logging all data\n        // console.log(\"Client Settings Version: \", localStorage.getItem(\"forceNewSettingsVersion\"));\n        // console.log(\"Server Settings Version: \", forceNewSettingsServerVersion);\n        // console.log(\"Client Cache Version: \", localStorage.getItem(\"forceCacheClearVersion\"));\n        // console.log(\"Server Cache Version: \", forceCacheClearServerVersion);\n        //firstime user donot have settings so set setting... and donot load updating section\n\n        if (localStorage.getItem(\"forceNewSettingsVersion\") === null && localStorage.getItem(\"forceCacheClearVersion\") === null) {\n          localStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\n          localStorage.setItem(\"forceCacheClearVersion\", forceCacheClearServerVersion);\n        } else {\n          //settings are already set so old user so call update method if settings changed\n          if (localStorage.getItem(\"forceNewSettingsVersion\") !== forceNewSettingsServerVersion) {\n            console.warn(\"Getting New Settings\");\n\n            _this2.props.getSettings();\n\n            localStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\n          }\n\n          if (localStorage.getItem(\"forceCacheClearVersion\") !== forceCacheClearServerVersion) {\n            var doProcess =\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return clearLocalStorage();\n\n                      case 2:\n                        _context.next = 4;\n                        return clearCacheStorage();\n\n                      case 4:\n                        _context.next = 6;\n                        return fetchSettingsAndLanguage();\n\n                      case 6:\n                        _context.next = 8;\n                        return updateClientVersion();\n\n                      case 8:\n                        _context.next = 10;\n                        return reloadBrowser();\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              }));\n\n              return function doProcess() {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            var clearLocalStorage = function clearLocalStorage() {\n              return new Promise(function (resolve) {\n                console.warn(\"Clear Local Storage\"); // take some backup\n\n                var geoLocation = localStorage.getItem(\"geoLocation\");\n                var userSetAddress = localStorage.getItem(\"userSetAddress\");\n                var storeColor = localStorage.getItem(\"storeColor\");\n                var storeLogo = localStorage.getItem(\"storeLogo\");\n                var updatingMessage = localStorage.getItem(\"updatingMessage\");\n                var userPreferedLanguage = localStorage.getItem(\"userPreferedLanguage\"); //clear\n\n                localStorage.clear(); //then push the backup again\n\n                if (geoLocation !== null) {\n                  localStorage.setItem(\"geoLocation\", geoLocation);\n                }\n\n                if (userSetAddress !== null) {\n                  localStorage.setItem(\"userSetAddress\", userSetAddress);\n                }\n\n                localStorage.setItem(\"storeColor\", storeColor);\n                localStorage.setItem(\"storeLogo\", storeLogo);\n                localStorage.setItem(\"updatingMessage\", updatingMessage);\n\n                if (userPreferedLanguage !== null) {\n                  localStorage.setItem(\"userPreferedLanguage\", userPreferedLanguage);\n                }\n\n                resolve(\"Completed clearLocalStorage\");\n              });\n            };\n\n            var clearCacheStorage = function clearCacheStorage() {\n              return new Promise(function (resolve) {\n                console.warn(\"Clear Cache Storage\");\n                navigator.serviceWorker.getRegistrations().then(function (registrations) {\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    for (var _iterator = registrations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var registration = _step.value;\n                      registration.unregister();\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                });\n\n                if (caches) {\n                  // console.log(\"CACHES:\", caches);\n                  caches.keys().then(function (names) {\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                      for (var _iterator2 = names[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var name = _step2.value;\n                        caches.delete(name);\n                      }\n                    } catch (err) {\n                      _didIteratorError2 = true;\n                      _iteratorError2 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                          _iterator2.return();\n                        }\n                      } finally {\n                        if (_didIteratorError2) {\n                          throw _iteratorError2;\n                        }\n                      }\n                    }\n                  });\n                }\n\n                resolve(\"Completed clearCacheStorage\");\n              });\n            };\n\n            var fetchSettingsAndLanguage = function fetchSettingsAndLanguage() {\n              return new Promise(function (resolve) {\n                console.warn(\"Fetch Settings and Translations\");\n\n                _this2.props.getSettings();\n\n                if (localStorage.getItem(\"userPreferedLanguage\") !== null) {\n                  _this2.props.getSingleLanguageData(localStorage.getItem(\"userPreferedLanguage\"));\n\n                  resolve(\"Completed fetchSettingsAndLanguage\");\n                } else {\n                  _this2.props.getAllLanguages().then(function (languages) {\n                    console.log(languages);\n                    console.log(\"Fetching Translation Data...\");\n                    var id = languages.payload.filter(function (lang) {\n                      return lang.is_default === 1;\n                    })[0].id;\n\n                    _this2.props.getSingleLanguageData(id).then(function () {\n                      resolve(\"Completed fetchSettingsAndLanguage\");\n                    });\n                  });\n                }\n              });\n            };\n\n            var updateClientVersion = function updateClientVersion() {\n              return new Promise(function (resolve) {\n                console.warn(\"Update Client Version\");\n                localStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\n                localStorage.setItem(\"forceCacheClearVersion\", forceCacheClearServerVersion);\n                resolve(\"Completed updateClientVersion\");\n              });\n            };\n\n            var reloadBrowser = function reloadBrowser() {\n              return new Promise(function (resolve) {\n                setTimeout(function () {\n                  _this2.setState({\n                    updating: false\n                  }, function () {\n                    window.location.reload(true);\n                    resolve(\"Completed reloadBrowser\");\n                  });\n                }, 3 * 1000);\n              });\n            };\n\n            _this2.setState({\n              updating: true\n            }); // Promise.all([clearLocalStorage(), clearCacheStorage(), updateClientVersion(), reloadBrowser()]);\n\n\n            doProcess();\n          } // if (localStorage.getItem(\"forceLogoutAllCustomers\") !== null) {\n          // \tif (localStorage.getItem(\"forceLogoutAllCustomers\") !== forceLogoutAllCustomers) {\n          // \t\tconsole.log(\"Logged out\");\n          // \t\tthis.props.logoutUser();\n          // \t\tlocalStorage.setItem(\"forceLogoutAllCustomers\", forceLogoutAllCustomers);\n          // \t}\n          // } else {\n          // \tlocalStorage.setItem(\"forceLogoutAllCustomers\", forceLogoutAllCustomers);\n          // }\n\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var updating = this.state.updating;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, updating && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"update-full-notification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"spin-load\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"update-full-notification\",\n        style: {\n          zIndex: 9999999999\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"d-flex\",\n        style: {\n          marginTop: \"8rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, localStorage.getItem(\"updatingMessage\")))));\n    }\n  }]);\n\n  return CheckVersion;\n}(Component); // export default CheckVersion;\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    settings: state.settings.settings\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSettings: getSettings,\n  getSingleLanguageData: getSingleLanguageData,\n  getAllLanguages: getAllLanguages,\n  logoutUser: logoutUser\n})(CheckVersion);","map":{"version":3,"sources":["/opt/lampp/htdocs/shawarma/src/components/CheckVersion/index.js"],"names":["React","Component","Axios","getSettings","connect","getSingleLanguageData","getAllLanguages","logoutUser","CheckVersion","state","updating","get","then","response","forceNewSettingsServerVersion","data","forceNewSettingsVersion","forceCacheClearServerVersion","forceCacheClearVersion","localStorage","getItem","setItem","console","warn","props","doProcess","clearLocalStorage","clearCacheStorage","fetchSettingsAndLanguage","updateClientVersion","reloadBrowser","Promise","resolve","geoLocation","userSetAddress","storeColor","storeLogo","updatingMessage","userPreferedLanguage","clear","navigator","serviceWorker","getRegistrations","registrations","registration","unregister","caches","keys","names","name","delete","languages","log","id","payload","filter","lang","is_default","setTimeout","setState","window","location","reload","zIndex","marginTop","mapStateToProps","settings"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { getSettings } from \"../../services/settings/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSingleLanguageData, getAllLanguages } from \"../../services/languages/actions\";\r\nimport { logoutUser } from \"../../services/user/actions\";\r\n\r\nclass CheckVersion extends Component {\r\n\tstate = {\r\n\t\tupdating: false,\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tAxios.get(\"/version.json\").then((response) => {\r\n\t\t\t//getting new data from version.json file\r\n\t\t\tconst forceNewSettingsServerVersion = response.data.forceNewSettingsVersion;\r\n\t\t\tconst forceCacheClearServerVersion = response.data.forceCacheClearVersion;\r\n\t\t\t// const forceLogoutAllCustomers = response.data.forceLogoutAllCustomers;\r\n\t\t\t//logging all data\r\n\t\t\t// console.log(\"Client Settings Version: \", localStorage.getItem(\"forceNewSettingsVersion\"));\r\n\t\t\t// console.log(\"Server Settings Version: \", forceNewSettingsServerVersion);\r\n\t\t\t// console.log(\"Client Cache Version: \", localStorage.getItem(\"forceCacheClearVersion\"));\r\n\t\t\t// console.log(\"Server Cache Version: \", forceCacheClearServerVersion);\r\n\r\n\t\t\t//firstime user donot have settings so set setting... and donot load updating section\r\n\t\t\tif (\r\n\t\t\t\tlocalStorage.getItem(\"forceNewSettingsVersion\") === null &&\r\n\t\t\t\tlocalStorage.getItem(\"forceCacheClearVersion\") === null\r\n\t\t\t) {\r\n\t\t\t\tlocalStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\r\n\t\t\t\tlocalStorage.setItem(\"forceCacheClearVersion\", forceCacheClearServerVersion);\r\n\t\t\t} else {\r\n\t\t\t\t//settings are already set so old user so call update method if settings changed\r\n\t\t\t\tif (localStorage.getItem(\"forceNewSettingsVersion\") !== forceNewSettingsServerVersion) {\r\n\t\t\t\t\tconsole.warn(\"Getting New Settings\");\r\n\t\t\t\t\tthis.props.getSettings();\r\n\t\t\t\t\tlocalStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (localStorage.getItem(\"forceCacheClearVersion\") !== forceCacheClearServerVersion) {\r\n\t\t\t\t\tconst clearLocalStorage = () => {\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tconsole.warn(\"Clear Local Storage\");\r\n\t\t\t\t\t\t\t// take some backup\r\n\t\t\t\t\t\t\tlet geoLocation = localStorage.getItem(\"geoLocation\");\r\n\t\t\t\t\t\t\tlet userSetAddress = localStorage.getItem(\"userSetAddress\");\r\n\t\t\t\t\t\t\tlet storeColor = localStorage.getItem(\"storeColor\");\r\n\t\t\t\t\t\t\tlet storeLogo = localStorage.getItem(\"storeLogo\");\r\n\t\t\t\t\t\t\tlet updatingMessage = localStorage.getItem(\"updatingMessage\");\r\n\t\t\t\t\t\t\tlet userPreferedLanguage = localStorage.getItem(\"userPreferedLanguage\");\r\n\r\n\t\t\t\t\t\t\t//clear\r\n\t\t\t\t\t\t\tlocalStorage.clear();\r\n\r\n\t\t\t\t\t\t\t//then push the backup again\r\n\t\t\t\t\t\t\tif (geoLocation !== null) {\r\n\t\t\t\t\t\t\t\tlocalStorage.setItem(\"geoLocation\", geoLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (userSetAddress !== null) {\r\n\t\t\t\t\t\t\t\tlocalStorage.setItem(\"userSetAddress\", userSetAddress);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"storeColor\", storeColor);\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"storeLogo\", storeLogo);\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"updatingMessage\", updatingMessage);\r\n\t\t\t\t\t\t\tif (userPreferedLanguage !== null) {\r\n\t\t\t\t\t\t\t\tlocalStorage.setItem(\"userPreferedLanguage\", userPreferedLanguage);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresolve(\"Completed clearLocalStorage\");\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst clearCacheStorage = () => {\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tconsole.warn(\"Clear Cache Storage\");\r\n\t\t\t\t\t\t\tnavigator.serviceWorker.getRegistrations().then(function(registrations) {\r\n\t\t\t\t\t\t\t\tfor (let registration of registrations) {\r\n\t\t\t\t\t\t\t\t\tregistration.unregister();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif (caches) {\r\n\t\t\t\t\t\t\t\t// console.log(\"CACHES:\", caches);\r\n\t\t\t\t\t\t\t\tcaches.keys().then(function(names) {\r\n\t\t\t\t\t\t\t\t\tfor (let name of names) caches.delete(name);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresolve(\"Completed clearCacheStorage\");\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst fetchSettingsAndLanguage = () => {\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tconsole.warn(\"Fetch Settings and Translations\");\r\n\t\t\t\t\t\t\tthis.props.getSettings();\r\n\r\n\t\t\t\t\t\t\tif (localStorage.getItem(\"userPreferedLanguage\") !== null) {\r\n\t\t\t\t\t\t\t\tthis.props.getSingleLanguageData(localStorage.getItem(\"userPreferedLanguage\"));\r\n\t\t\t\t\t\t\t\tresolve(\"Completed fetchSettingsAndLanguage\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.props.getAllLanguages().then((languages) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(languages);\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"Fetching Translation Data...\");\r\n\t\t\t\t\t\t\t\t\tconst id = languages.payload.filter((lang) => lang.is_default === 1)[0].id;\r\n\t\t\t\t\t\t\t\t\tthis.props.getSingleLanguageData(id).then(() => {\r\n\t\t\t\t\t\t\t\t\t\tresolve(\"Completed fetchSettingsAndLanguage\");\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst updateClientVersion = () => {\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tconsole.warn(\"Update Client Version\");\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"forceNewSettingsVersion\", forceNewSettingsServerVersion);\r\n\t\t\t\t\t\t\tlocalStorage.setItem(\"forceCacheClearVersion\", forceCacheClearServerVersion);\r\n\t\t\t\t\t\t\tresolve(\"Completed updateClientVersion\");\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst reloadBrowser = () => {\r\n\t\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\tthis.setState({ updating: false }, () => {\r\n\t\t\t\t\t\t\t\t\twindow.location.reload(true);\r\n\t\t\t\t\t\t\t\t\tresolve(\"Completed reloadBrowser\");\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}, 3 * 1000);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tasync function doProcess() {\r\n\t\t\t\t\t\tawait clearLocalStorage();\r\n\t\t\t\t\t\tawait clearCacheStorage();\r\n\t\t\t\t\t\tawait fetchSettingsAndLanguage();\r\n\t\t\t\t\t\tawait updateClientVersion();\r\n\t\t\t\t\t\tawait reloadBrowser();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({ updating: true });\r\n\t\t\t\t\t// Promise.all([clearLocalStorage(), clearCacheStorage(), updateClientVersion(), reloadBrowser()]);\r\n\r\n\t\t\t\t\tdoProcess();\r\n\t\t\t\t}\r\n\t\t\t\t// if (localStorage.getItem(\"forceLogoutAllCustomers\") !== null) {\r\n\t\t\t\t// \tif (localStorage.getItem(\"forceLogoutAllCustomers\") !== forceLogoutAllCustomers) {\r\n\t\t\t\t// \t\tconsole.log(\"Logged out\");\r\n\t\t\t\t// \t\tthis.props.logoutUser();\r\n\t\t\t\t// \t\tlocalStorage.setItem(\"forceLogoutAllCustomers\", forceLogoutAllCustomers);\r\n\t\t\t\t// \t}\r\n\t\t\t\t// } else {\r\n\t\t\t\t// \tlocalStorage.setItem(\"forceLogoutAllCustomers\", forceLogoutAllCustomers);\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tconst { updating } = this.state;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{updating && (\r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<div className=\"update-full-notification\">\r\n\t\t\t\t\t\t\t<span className=\"spin-load\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"update-full-notification\" style={{ zIndex: 9999999999 }}>\r\n\t\t\t\t\t\t\t<h1 className=\"d-flex\" style={{ marginTop: \"8rem\" }}>\r\n\t\t\t\t\t\t\t\t{localStorage.getItem(\"updatingMessage\")}\r\n\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t)}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// export default CheckVersion;\r\nconst mapStateToProps = (state) => ({\r\n\tsettings: state.settings.settings,\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ getSettings, getSingleLanguageData, getAllLanguages, logoutUser }\r\n)(CheckVersion);\r\n"]},"metadata":{},"sourceType":"module"}