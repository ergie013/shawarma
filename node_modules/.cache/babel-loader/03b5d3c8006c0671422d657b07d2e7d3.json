{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Helper from './Helper';\n\nvar FuzzySearch =\n/*#__PURE__*/\nfunction () {\n  function FuzzySearch() {\n    var haystack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, FuzzySearch);\n\n    if (!Array.isArray(keys)) {\n      options = keys;\n      keys = [];\n    }\n\n    this.haystack = haystack;\n    this.keys = keys;\n    this.options = Object.assign({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n\n  _createClass(FuzzySearch, [{\n    key: \"search\",\n    value: function search() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (query === '') {\n        return this.haystack;\n      }\n\n      var results = [];\n\n      for (var i = 0; i < this.haystack.length; i++) {\n        var item = this.haystack[i];\n\n        if (this.keys.length === 0) {\n          var score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n          if (score) {\n            results.push({\n              item: item,\n              score: score\n            });\n          }\n        } else {\n          for (var y = 0; y < this.keys.length; y++) {\n            var propertyValues = Helper.getDescendantProperty(item, this.keys[y]);\n            var found = false;\n\n            for (var z = 0; z < propertyValues.length; z++) {\n              var _score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n              if (_score) {\n                found = true;\n                results.push({\n                  item: item,\n                  score: _score\n                });\n                break;\n              }\n            }\n\n            if (found) {\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.options.sort) {\n        results.sort(function (a, b) {\n          return a.score - b.score;\n        });\n      }\n\n      return results.map(function (result) {\n        return result.item;\n      });\n    }\n  }], [{\n    key: \"isMatch\",\n    value: function isMatch(item, query, caseSensitive) {\n      item = String(item);\n      query = String(query);\n\n      if (!caseSensitive) {\n        item = item.toLocaleLowerCase();\n        query = query.toLocaleLowerCase();\n      }\n\n      var indexes = FuzzySearch.nearestIndexesFor(item, query);\n\n      if (!indexes) {\n        return false;\n      } // Exact matches should be first.\n\n\n      if (item === query) {\n        return 1;\n      } // If we have more than 2 letters, matches close to each other should be first.\n\n\n      if (indexes.length > 1) {\n        return 2 + (indexes[indexes.length - 1] - indexes[0]);\n      } // Matches closest to the start of the string should be first.\n\n\n      return 2 + indexes[0];\n    }\n  }, {\n    key: \"nearestIndexesFor\",\n    value: function nearestIndexesFor(item, query) {\n      var letters = query.split('');\n      var indexes = [];\n      var indexesOfFirstLetter = FuzzySearch.indexesOfFirstLetter(item, query);\n      indexesOfFirstLetter.forEach(function (startingIndex, loopingIndex) {\n        var index = startingIndex + 1;\n        indexes[loopingIndex] = [startingIndex];\n\n        for (var i = 1; i < letters.length; i++) {\n          var letter = letters[i];\n          index = item.indexOf(letter, index);\n\n          if (index === -1) {\n            indexes[loopingIndex] = false;\n            break;\n          }\n\n          indexes[loopingIndex].push(index);\n          index++;\n        }\n      });\n      indexes = indexes.filter(function (letterIndexes) {\n        return letterIndexes !== false;\n      });\n\n      if (!indexes.length) {\n        return false;\n      }\n\n      return indexes.sort(function (a, b) {\n        if (a.length === 1) {\n          return a[0] - b[0];\n        }\n\n        a = a[a.length - 1] - a[0];\n        b = b[b.length - 1] - b[0];\n        return a - b;\n      })[0];\n    }\n  }, {\n    key: \"indexesOfFirstLetter\",\n    value: function indexesOfFirstLetter(item, query) {\n      var match = query[0];\n      return item.split('').map(function (letter, index) {\n        if (letter !== match) {\n          return false;\n        }\n\n        return index;\n      }).filter(function (index) {\n        return index !== false;\n      });\n    }\n  }]);\n\n  return FuzzySearch;\n}();\n\nexport { FuzzySearch as default };","map":null,"metadata":{},"sourceType":"module"}