{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/shawarma/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/lampp/htdocs/shawarma/src/components/Mobile/RunningOrder/Map/GoogleMaps/index.js\";\nimport { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\nimport mapStyle from \"../../../GeoLocationPage/mapStyle.json\";\nimport ContentLoader from \"react-content-loader\";\nimport React, { Component } from \"react\";\n\nvar GoogleMaps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoogleMaps, _Component);\n\n  function GoogleMaps() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GoogleMaps);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleMaps)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      zoom: 15\n    };\n    return _this;\n  }\n\n  _createClass(GoogleMaps, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var deliveryMarker = this.refs.deliveryRefIcon;\n\n      if (deliveryMarker) {\n        deliveryMarker.style.transform = \"rotate(\" + 50 + \"deg)\";\n        deliveryMarker.style.transition = \"transform 1s linear\";\n      }\n\n      setTimeout(function () {\n        _this2.setState({\n          zoom: 18\n        });\n      }, 1 * 1000);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      setTimeout(function () {\n        if (document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]') && nextProps.delivery_gps_location.heading) {\n          console.log(\"Inside update delivery icon\");\n          document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]').style.transform = \"rotate(\" + nextProps.delivery_gps_location.heading + \"deg)\";\n          document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]').style.transition = \"transform 0.25s linear\";\n        }\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Map, {\n        ref: function ref(_ref) {\n          _this3.map = _ref;\n        },\n        google: this.props.google,\n        style: {\n          width: \"100%\",\n          height: \"55vh\"\n        },\n        initialCenter: {\n          lat: JSON.parse(this.props.deliveryLocation).lat,\n          lng: JSON.parse(this.props.deliveryLocation).lng\n        },\n        zoom: this.state.zoom,\n        styles: mapStyle,\n        zoomControl: false,\n        mapTypeControl: false,\n        scaleControl: true,\n        streetViewControl: false,\n        fullscreenControl: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        position: {\n          lat: JSON.parse(this.props.deliveryLocation).lat,\n          lng: JSON.parse(this.props.deliveryLocation).lng\n        },\n        icon: {\n          url: \"/assets/img/various/marker-home.png\",\n          // anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(34, 54)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: {\n          lat: parseFloat(this.props.restaurant_latitude),\n          lng: parseFloat(this.props.restaurant_longitude)\n        },\n        icon: {\n          url: \"/assets/img/various/marker-restaurant.png\",\n          // anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(34, 54)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), this.props.show_delivery_gps && React.createElement(Marker, {\n        position: {\n          lat: parseFloat(this.props.delivery_gps_location.delivery_lat),\n          lng: parseFloat(this.props.delivery_gps_location.delivery_long)\n        },\n        icon: {\n          url: \"/assets/img/various/marker-delivery.png\",\n          anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(54, 54)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GoogleMaps;\n}(Component);\n\nvar MapLoadingContainer = function MapLoadingContainer() {\n  return React.createElement(ContentLoader, {\n    height: 400,\n    width: window.innerWidth,\n    speed: 1.2,\n    primaryColor: \"#f3f3f3\",\n    secondaryColor: \"#ecebeb\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    rx: \"0\",\n    ry: \"0\",\n    width: window.innerWidth,\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n};\n\nexport default GoogleApiWrapper({\n  apiKey: localStorage.getItem(\"googleApiKey\"),\n  LoadingContainer: MapLoadingContainer\n})(GoogleMaps);","map":{"version":3,"sources":["/opt/lampp/htdocs/shawarma/src/components/Mobile/RunningOrder/Map/GoogleMaps/index.js"],"names":["GoogleApiWrapper","Map","Marker","mapStyle","ContentLoader","React","Component","GoogleMaps","state","zoom","deliveryMarker","refs","deliveryRefIcon","style","transform","transition","setTimeout","setState","nextProps","document","querySelector","delivery_gps_location","heading","console","log","ref","map","props","google","width","height","lat","JSON","parse","deliveryLocation","lng","url","scaledSize","maps","Size","parseFloat","restaurant_latitude","restaurant_longitude","show_delivery_gps","delivery_lat","delivery_long","anchor","Point","MapLoadingContainer","window","innerWidth","apiKey","localStorage","getItem","LoadingContainer"],"mappings":";;;;;;AAAA,SAASA,gBAAT,EAA2BC,GAA3B,EAAgCC,MAAhC,QAA8C,mBAA9C;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,U;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAE;AADF,K;;;;;;wCAIY;AAAA;;AAChB,UAAMC,cAAc,GAAG,KAAKC,IAAL,CAAUC,eAAjC;;AAEA,UAAIF,cAAJ,EAAoB;AAChBA,QAAAA,cAAc,CAACG,KAAf,CAAqBC,SAArB,GAAiC,YAAY,EAAZ,GAAiB,MAAlD;AACAJ,QAAAA,cAAc,CAACG,KAAf,CAAqBE,UAArB,GAAkC,qBAAlC;AACH;;AACDC,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,MAAI,CAACC,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAE;AAAR,SAAd;AACH,OAFS,EAEP,IAAI,IAFG,CAAV;AAGH;;;8CAEyBS,S,EAAW;AACjCF,MAAAA,UAAU,CAAC,YAAM;AACb,YAAIG,QAAQ,CAACC,aAAT,CAAuB,kDAAvB,KAA8EF,SAAS,CAACG,qBAAV,CAAgCC,OAAlH,EAA2H;AACvHC,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAL,UAAAA,QAAQ,CAACC,aAAT,CAAuB,kDAAvB,EAA2EP,KAA3E,CAAiFC,SAAjF,GACI,YAAYI,SAAS,CAACG,qBAAV,CAAgCC,OAA5C,GAAsD,MAD1D;AAEAH,UAAAA,QAAQ,CAACC,aAAT,CAAuB,kDAAvB,EAA2EP,KAA3E,CAAiFE,UAAjF,GAA8F,wBAA9F;AACH;AACJ,OAPS,EAOP,GAPO,CAAV;AAQH;;;6BAEQ;AAAA;;AACL,aACI,oBAAC,GAAD;AACI,QAAA,GAAG,EAAE,aAAAU,IAAG,EAAI;AACR,UAAA,MAAI,CAACC,GAAL,GAAWD,IAAX;AACH,SAHL;AAII,QAAA,MAAM,EAAE,KAAKE,KAAL,CAAWC,MAJvB;AAKI,QAAA,KAAK,EAAE;AACHC,UAAAA,KAAK,EAAE,MADJ;AAEHC,UAAAA,MAAM,EAAE;AAFL,SALX;AASI,QAAA,aAAa,EAAE;AACXC,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKN,KAAL,CAAWO,gBAAtB,EAAwCH,GADlC;AAEXI,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAW,KAAKN,KAAL,CAAWO,gBAAtB,EAAwCC;AAFlC,SATnB;AAaI,QAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWC,IAbrB;AAcI,QAAA,MAAM,EAAEN,QAdZ;AAeI,QAAA,WAAW,EAAE,KAfjB;AAgBI,QAAA,cAAc,EAAE,KAhBpB;AAiBI,QAAA,YAAY,EAAE,IAjBlB;AAkBI,QAAA,iBAAiB,EAAE,KAlBvB;AAmBI,QAAA,iBAAiB,EAAE,KAnBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAqBI,oBAAC,MAAD;AACI,QAAA,QAAQ,EAAE;AACN4B,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKN,KAAL,CAAWO,gBAAtB,EAAwCH,GADvC;AAENI,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAW,KAAKN,KAAL,CAAWO,gBAAtB,EAAwCC;AAFvC,SADd;AAKI,QAAA,IAAI,EAAE;AACFC,UAAAA,GAAG,EAAE,qCADH;AAEF;AACAC,UAAAA,UAAU,EAAE,IAAI,KAAKV,KAAL,CAAWC,MAAX,CAAkBU,IAAlB,CAAuBC,IAA3B,CAAgC,EAAhC,EAAoC,EAApC;AAHV,SALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBJ,EAiCI,oBAAC,MAAD;AACI,QAAA,QAAQ,EAAE;AACNR,UAAAA,GAAG,EAAES,UAAU,CAAC,KAAKb,KAAL,CAAWc,mBAAZ,CADT;AAENN,UAAAA,GAAG,EAAEK,UAAU,CAAC,KAAKb,KAAL,CAAWe,oBAAZ;AAFT,SADd;AAKI,QAAA,IAAI,EAAE;AACFN,UAAAA,GAAG,EAAE,2CADH;AAEF;AACAC,UAAAA,UAAU,EAAE,IAAI,KAAKV,KAAL,CAAWC,MAAX,CAAkBU,IAAlB,CAAuBC,IAA3B,CAAgC,EAAhC,EAAoC,EAApC;AAHV,SALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjCJ,EA4CK,KAAKZ,KAAL,CAAWgB,iBAAX,IACG,oBAAC,MAAD;AACI,QAAA,QAAQ,EAAE;AACNZ,UAAAA,GAAG,EAAES,UAAU,CAAC,KAAKb,KAAL,CAAWN,qBAAX,CAAiCuB,YAAlC,CADT;AAENT,UAAAA,GAAG,EAAEK,UAAU,CAAC,KAAKb,KAAL,CAAWN,qBAAX,CAAiCwB,aAAlC;AAFT,SADd;AAKI,QAAA,IAAI,EAAE;AACFT,UAAAA,GAAG,EAAE,yCADH;AAEFU,UAAAA,MAAM,EAAE,IAAI,KAAKnB,KAAL,CAAWC,MAAX,CAAkBU,IAAlB,CAAuBS,KAA3B,CAAiC,EAAjC,EAAqC,EAArC,CAFN;AAGFV,UAAAA,UAAU,EAAE,IAAI,KAAKV,KAAL,CAAWC,MAAX,CAAkBU,IAAlB,CAAuBC,IAA3B,CAAgC,EAAhC,EAAoC,EAApC;AAHV,SALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7CR,CADJ;AA4DH;;;;EAzFoBjC,S;;AA4FzB,IAAM0C,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SACxB,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAE,GAAvB;AAA4B,IAAA,KAAK,EAAEC,MAAM,CAACC,UAA1C;AAAsD,IAAA,KAAK,EAAE,GAA7D;AAAkE,IAAA,YAAY,EAAC,SAA/E;AAAyF,IAAA,cAAc,EAAC,SAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,CAAC,EAAC,GAAR;AAAY,IAAA,CAAC,EAAC,GAAd;AAAkB,IAAA,EAAE,EAAC,GAArB;AAAyB,IAAA,EAAE,EAAC,GAA5B;AAAgC,IAAA,KAAK,EAAED,MAAM,CAACC,UAA9C;AAA0D,IAAA,MAAM,EAAC,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADwB;AAAA,CAA5B;;AAMA,eAAelD,gBAAgB,CAAC;AAC5BmD,EAAAA,MAAM,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,CADoB;AAE5BC,EAAAA,gBAAgB,EAAEN;AAFU,CAAD,CAAhB,CAGZzC,UAHY,CAAf","sourcesContent":["import { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\r\nimport mapStyle from \"../../../GeoLocationPage/mapStyle.json\";\r\nimport ContentLoader from \"react-content-loader\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass GoogleMaps extends Component {\r\n    state = {\r\n        zoom: 15\r\n    };\r\n\r\n    componentDidMount() {\r\n        const deliveryMarker = this.refs.deliveryRefIcon;\r\n\r\n        if (deliveryMarker) {\r\n            deliveryMarker.style.transform = \"rotate(\" + 50 + \"deg)\";\r\n            deliveryMarker.style.transition = \"transform 1s linear\";\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ zoom: 18 });\r\n        }, 1 * 1000);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        setTimeout(() => {\r\n            if (document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]') && nextProps.delivery_gps_location.heading) {\r\n                console.log(\"Inside update delivery icon\");\r\n                document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]').style.transform =\r\n                    \"rotate(\" + nextProps.delivery_gps_location.heading + \"deg)\";\r\n                document.querySelector('[src*=\"/assets/img/various/marker-delivery.png\"]').style.transition = \"transform 0.25s linear\";\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                ref={ref => {\r\n                    this.map = ref;\r\n                }}\r\n                google={this.props.google}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"55vh\"\r\n                }}\r\n                initialCenter={{\r\n                    lat: JSON.parse(this.props.deliveryLocation).lat,\r\n                    lng: JSON.parse(this.props.deliveryLocation).lng\r\n                }}\r\n                zoom={this.state.zoom}\r\n                styles={mapStyle}\r\n                zoomControl={false}\r\n                mapTypeControl={false}\r\n                scaleControl={true}\r\n                streetViewControl={false}\r\n                fullscreenControl={false}\r\n            >\r\n                <Marker\r\n                    position={{\r\n                        lat: JSON.parse(this.props.deliveryLocation).lat,\r\n                        lng: JSON.parse(this.props.deliveryLocation).lng\r\n                    }}\r\n                    icon={{\r\n                        url: \"/assets/img/various/marker-home.png\",\r\n                        // anchor: new this.props.google.maps.Point(32, 32),\r\n                        scaledSize: new this.props.google.maps.Size(34, 54)\r\n                    }}\r\n                ></Marker>\r\n\r\n                <Marker\r\n                    position={{\r\n                        lat: parseFloat(this.props.restaurant_latitude),\r\n                        lng: parseFloat(this.props.restaurant_longitude)\r\n                    }}\r\n                    icon={{\r\n                        url: \"/assets/img/various/marker-restaurant.png\",\r\n                        // anchor: new this.props.google.maps.Point(32, 32),\r\n                        scaledSize: new this.props.google.maps.Size(34, 54)\r\n                    }}\r\n                ></Marker>\r\n                {this.props.show_delivery_gps && (\r\n                    <Marker\r\n                        position={{\r\n                            lat: parseFloat(this.props.delivery_gps_location.delivery_lat),\r\n                            lng: parseFloat(this.props.delivery_gps_location.delivery_long)\r\n                        }}\r\n                        icon={{\r\n                            url: \"/assets/img/various/marker-delivery.png\",\r\n                            anchor: new this.props.google.maps.Point(32, 32),\r\n                            scaledSize: new this.props.google.maps.Size(54, 54)\r\n                        }}\r\n                    ></Marker>\r\n                )}\r\n            </Map>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapLoadingContainer = () => (\r\n    <ContentLoader height={400} width={window.innerWidth} speed={1.2} primaryColor=\"#f3f3f3\" secondaryColor=\"#ecebeb\">\r\n        <rect x=\"0\" y=\"0\" rx=\"0\" ry=\"0\" width={window.innerWidth} height=\"400\" />\r\n    </ContentLoader>\r\n);\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: localStorage.getItem(\"googleApiKey\"),\r\n    LoadingContainer: MapLoadingContainer\r\n})(GoogleMaps);\r\n"]},"metadata":{},"sourceType":"module"}