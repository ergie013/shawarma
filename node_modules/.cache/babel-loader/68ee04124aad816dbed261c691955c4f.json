{"ast":null,"code":"import { a as getCardTypeByValue } from './cardTypes-4f45f8d3.js';\nvar MONTH_REGEX = /(0[1-9]|1[0-2])/;\nvar EMPTY_CARD_NUMBER = 'Enter a card number';\nvar EMPTY_EXPIRY_DATE = 'Enter an expiry date';\nvar EMPTY_CVC = 'Enter a CVC';\nvar EMPTY_ZIP = 'Enter a ZIP code';\nvar INVALID_CARD_NUMBER = 'Card number is invalid';\nvar INVALID_EXPIRY_DATE = 'Expiry date is invalid';\nvar INVALID_CVC = 'CVC is invalid';\nvar MONTH_OUT_OF_RANGE = 'Expiry month must be between 01 and 12';\nvar YEAR_OUT_OF_RANGE = 'Expiry year cannot be in the past';\nvar DATE_OUT_OF_RANGE = 'Expiry date cannot be in the past';\n\nvar hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue) {\n  var cardType = getCardTypeByValue(currentValue);\n  return cardType && currentValue.length >= cardType.lengths[cardType.lengths.length - 1];\n};\n\nvar isNumeric = function isNumeric(e) {\n  return /^\\d*$/.test(e.key);\n};\n\nvar validateLuhn = function validateLuhn(cardNumber) {\n  return cardNumber.split('').reverse().map(function (digit) {\n    return parseInt(digit, 10);\n  }).map(function (digit, idx) {\n    return idx % 2 ? digit * 2 : digit;\n  }).map(function (digit) {\n    return digit > 9 ? digit % 10 + 1 : digit;\n  }).reduce(function (accum, digit) {\n    return accum += digit;\n  }) % 10 === 0;\n};\n\nvar getCardNumberError = function getCardNumberError(cardNumber, cardNumberValidator) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$errorMessages = _ref.errorMessages,\n      errorMessages = _ref$errorMessages === void 0 ? {} : _ref$errorMessages;\n\n  if (!cardNumber) {\n    return errorMessages.emptyCardNumber || EMPTY_CARD_NUMBER;\n  }\n\n  var rawCardNumber = cardNumber.replace(/\\s/g, '');\n  var cardType = getCardTypeByValue(rawCardNumber);\n\n  if (cardType && cardType.lengths) {\n    var doesCardNumberMatchLength = cardType.lengths.includes(rawCardNumber.length);\n\n    if (doesCardNumberMatchLength) {\n      var isLuhnValid = validateLuhn(rawCardNumber);\n\n      if (isLuhnValid) {\n        if (cardNumberValidator) {\n          return cardNumberValidator({\n            cardNumber: rawCardNumber,\n            cardType: cardType,\n            errorMessages: errorMessages\n          });\n        }\n\n        return;\n      }\n    }\n  }\n\n  return errorMessages.invalidCardNumber || INVALID_CARD_NUMBER;\n};\n\nvar getExpiryDateError = function getExpiryDateError(expiryDate, expiryValidator) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$errorMessages = _ref2.errorMessages,\n      errorMessages = _ref2$errorMessages === void 0 ? {} : _ref2$errorMessages;\n\n  if (!expiryDate) {\n    return errorMessages.emptyExpiryDate || EMPTY_EXPIRY_DATE;\n  }\n\n  var rawExpiryDate = expiryDate.replace(' / ', '').replace('/', '');\n\n  if (rawExpiryDate.length === 4) {\n    var month = rawExpiryDate.slice(0, 2);\n    var year = \"20\".concat(rawExpiryDate.slice(2, 4));\n\n    if (!MONTH_REGEX.test(month)) {\n      return errorMessages.monthOutOfRange || MONTH_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) < new Date().getFullYear()) {\n      return errorMessages.yearOutOfRange || YEAR_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) === new Date().getFullYear() && parseInt(month) < new Date().getMonth() + 1) {\n      return errorMessages.dateOutOfRange || DATE_OUT_OF_RANGE;\n    }\n\n    if (expiryValidator) {\n      return expiryValidator({\n        expiryDate: {\n          month: month,\n          year: year\n        },\n        errorMessages: errorMessages\n      });\n    }\n\n    return;\n  }\n\n  return errorMessages.invalidExpiryDate || INVALID_EXPIRY_DATE;\n};\n\nvar getCVCError = function getCVCError(cvc, cvcValidator) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      cardType = _ref3.cardType,\n      _ref3$errorMessages = _ref3.errorMessages,\n      errorMessages = _ref3$errorMessages === void 0 ? {} : _ref3$errorMessages;\n\n  if (!cvc) {\n    return errorMessages.emptyCVC || EMPTY_CVC;\n  }\n\n  if (cvc.length < 3) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cardType && cvc.length !== cardType.code.length) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cvcValidator) {\n    return cvcValidator({\n      cvc: cvc,\n      cardType: cardType,\n      errorMessages: errorMessages\n    });\n  }\n\n  return;\n};\n\nvar getZIPError = function getZIPError(zip) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errorMessages = _ref4.errorMessages,\n      errorMessages = _ref4$errorMessages === void 0 ? {} : _ref4$errorMessages;\n\n  if (!zip) {\n    return errorMessages.emptyZIP || EMPTY_ZIP;\n  }\n\n  return;\n};\n\nvar validator =\n/*#__PURE__*/\nObject.freeze({\n  EMPTY_CARD_NUMBER: EMPTY_CARD_NUMBER,\n  EMPTY_EXPIRY_DATE: EMPTY_EXPIRY_DATE,\n  EMPTY_CVC: EMPTY_CVC,\n  EMPTY_ZIP: EMPTY_ZIP,\n  INVALID_CARD_NUMBER: INVALID_CARD_NUMBER,\n  INVALID_EXPIRY_DATE: INVALID_EXPIRY_DATE,\n  INVALID_CVC: INVALID_CVC,\n  MONTH_OUT_OF_RANGE: MONTH_OUT_OF_RANGE,\n  YEAR_OUT_OF_RANGE: YEAR_OUT_OF_RANGE,\n  DATE_OUT_OF_RANGE: DATE_OUT_OF_RANGE,\n  hasCardNumberReachedMaxLength: hasCardNumberReachedMaxLength,\n  isNumeric: isNumeric,\n  validateLuhn: validateLuhn,\n  getCardNumberError: getCardNumberError,\n  getExpiryDateError: getExpiryDateError,\n  getCVCError: getCVCError,\n  getZIPError: getZIPError\n});\nexport { validator as a, EMPTY_CARD_NUMBER as b, EMPTY_EXPIRY_DATE as c, EMPTY_CVC as d, EMPTY_ZIP as e, INVALID_CARD_NUMBER as f, INVALID_EXPIRY_DATE as g, INVALID_CVC as h, MONTH_OUT_OF_RANGE as i, YEAR_OUT_OF_RANGE as j, DATE_OUT_OF_RANGE as k, hasCardNumberReachedMaxLength as l, isNumeric as m, validateLuhn as n, getCardNumberError as o, getExpiryDateError as p, getCVCError as q, getZIPError as r };","map":null,"metadata":{},"sourceType":"module"}