{"ast":null,"code":"import './utils/cardTypes-4f45f8d3.js';\nimport './utils/validator-0f41e23d.js';\nimport { b as _slicedToArray, c as _objectSpread, d as _defineProperty, e as _objectWithoutProperties } from './chunk-7eee66c0.js';\nimport './utils/formatter-b0b2372d.js';\nimport utils from './utils/index.js';\nimport React from 'react';\n\nfunction usePaymentCard() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$autoFocus = _ref.autoFocus,\n      autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus,\n      errorMessages = _ref.errorMessages,\n      onBlur = _ref.onBlur,\n      onChange = _ref.onChange,\n      onError = _ref.onError,\n      onTouch = _ref.onTouch,\n      cardNumberValidator = _ref.cardNumberValidator,\n      cvcValidator = _ref.cvcValidator,\n      expiryValidator = _ref.expiryValidator;\n\n  var cardNumberField = React.useRef();\n  var expiryDateField = React.useRef();\n  var cvcField = React.useRef();\n  var zipField = React.useRef();\n  /** ====== START: META STUFF ====== */\n\n  var _React$useState = React.useState({\n    cardNumber: false,\n    expiryDate: false,\n    cvc: false,\n    zip: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      touchedInputs = _React$useState2[0],\n      setTouchedInputs = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isTouched = _React$useState4[0],\n      setIsTouched = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    cardNumber: undefined,\n    expiryDate: undefined,\n    cvc: undefined,\n    zip: undefined\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      erroredInputs = _React$useState6[0],\n      setErroredInputs = _React$useState6[1];\n\n  var _React$useState7 = React.useState(),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      error = _React$useState8[0],\n      setError = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      cardType = _React$useState10[0],\n      setCardType = _React$useState10[1];\n\n  var _React$useState11 = React.useState(),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      focused = _React$useState12[0],\n      setFocused = _React$useState12[1];\n\n  var setInputError = React.useCallback(function (input, error) {\n    setErroredInputs(function (erroredInputs) {\n      if (erroredInputs[input] === error) return erroredInputs;\n      var newError = error;\n\n      var newErroredInputs = _objectSpread({}, erroredInputs, _defineProperty({}, input, error));\n\n      if (error) {\n        setError(error);\n      } else {\n        newError = Object.values(newErroredInputs).find(Boolean);\n        setError(newError);\n      }\n\n      onError && onError(newError, newErroredInputs);\n      return newErroredInputs;\n    });\n  }, []); // eslint-disable-line\n\n  var setInputTouched = React.useCallback(function (input, value) {\n    requestAnimationFrame(function () {\n      if (document.activeElement.tagName !== 'INPUT') {\n        setIsTouched(true);\n      } else if (value === false) {\n        setIsTouched(false);\n      }\n    });\n    setTouchedInputs(function (touchedInputs) {\n      if (touchedInputs[input] === value) return touchedInputs;\n\n      var newTouchedInputs = _objectSpread({}, touchedInputs, _defineProperty({}, input, value));\n\n      onTouch && onTouch(_defineProperty({}, input, value), newTouchedInputs);\n      return newTouchedInputs;\n    });\n  }, []); // eslint-disable-line\n\n  /** ====== END: META STUFF ====== */\n\n  /** ====== START: CARD NUMBER STUFF ====== */\n\n  var handleBlurCardNumber = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onBlur && props.onBlur(e);\n      onBlur && onBlur(e);\n      setFocused(undefined);\n      setInputTouched('cardNumber', true);\n    };\n  }, [onBlur, setInputTouched]);\n  var handleChangeCardNumber = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      var formattedCardNumber = e.target.value || '';\n      var cardNumber = formattedCardNumber.replace(/\\s/g, '');\n      var cursorPosition = cardNumberField.current.selectionStart;\n      var cardType = utils.cardTypes.getCardTypeByValue(cardNumber);\n      setCardType(cardType);\n      setInputTouched('cardNumber', false); // @ts-ignore\n\n      cardNumberField.current.value = utils.formatter.formatCardNumber(cardNumber);\n      props.onChange && props.onChange(e);\n      onChange && onChange(e); // Due to the card number formatting, the selection cursor will fall to the end of\n      // the input field. Here, we want to reposition the cursor to the correct place.\n\n      requestAnimationFrame(function () {\n        if (document.activeElement !== cardNumberField.current) return;\n\n        if (cardNumberField.current.value[cursorPosition - 1] === ' ') {\n          cursorPosition = cursorPosition + 1;\n        }\n\n        cardNumberField.current.setSelectionRange(cursorPosition, cursorPosition);\n      });\n      var cardNumberError = utils.validator.getCardNumberError(cardNumber, cardNumberValidator, {\n        errorMessages: errorMessages\n      });\n\n      if (!cardNumberError && autoFocus) {\n        expiryDateField.current && expiryDateField.current.focus();\n      }\n\n      setInputError('cardNumber', cardNumberError);\n      props.onError && props.onError(cardNumberError);\n    };\n  }, [autoFocus, cardNumberValidator, errorMessages, onChange, setInputError, setInputTouched]);\n  var handleFocusCardNumber = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onFocus && props.onFocus(e);\n      setFocused('cardNumber');\n    };\n  }, []);\n  var handleKeyPressCardNumber = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      var formattedCardNumber = e.target.value || '';\n      var cardNumber = formattedCardNumber.replace(/\\s/g, '');\n      props.onKeyPress && props.onKeyPress(e);\n\n      if (e.key !== utils.ENTER_KEY_CODE) {\n        if (!utils.validator.isNumeric(e)) {\n          e.preventDefault();\n        }\n\n        if (utils.validator.hasCardNumberReachedMaxLength(cardNumber)) {\n          e.preventDefault();\n        }\n      }\n    };\n  }, []);\n  var getCardNumberProps = React.useCallback(function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var refKey = _ref2.refKey,\n        props = _objectWithoutProperties(_ref2, [\"refKey\"]);\n\n    return _objectSpread(_defineProperty({\n      'aria-label': 'Card number',\n      autoComplete: 'cc-number',\n      id: 'cardNumber',\n      name: 'cardNumber',\n      placeholder: 'Card number',\n      type: 'tel'\n    }, refKey || 'ref', cardNumberField), props, {\n      onBlur: handleBlurCardNumber(props),\n      onChange: handleChangeCardNumber(props),\n      onFocus: handleFocusCardNumber(props),\n      onKeyPress: handleKeyPressCardNumber(props)\n    });\n  }, [handleBlurCardNumber, handleChangeCardNumber, handleFocusCardNumber, handleKeyPressCardNumber]);\n  /** ====== END: CARD NUMBER STUFF ====== */\n\n  /** ====== START: EXPIRY DATE STUFF ====== */\n\n  var handleBlurExpiryDate = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onBlur && props.onBlur(e);\n      onBlur && onBlur(e);\n      setFocused(undefined);\n      setInputTouched('expiryDate', true);\n    };\n  }, [onBlur, setInputTouched]);\n  var handleChangeExpiryDate = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      setInputTouched('expiryDate', false);\n      expiryDateField.current.value = utils.formatter.formatExpiry(e);\n      props.onChange && props.onChange(e);\n      onChange && onChange(e);\n      var expiryDateError = utils.validator.getExpiryDateError(expiryDateField.current.value, expiryValidator, {\n        errorMessages: errorMessages\n      });\n\n      if (!expiryDateError && autoFocus) {\n        cvcField.current && cvcField.current.focus();\n      }\n\n      setInputError('expiryDate', expiryDateError);\n      props.onError && props.onError(expiryDateError);\n    };\n  }, [autoFocus, errorMessages, expiryValidator, onChange, setInputError, setInputTouched]);\n  var handleFocusExpiryDate = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onFocus && props.onFocus(e);\n      setFocused('expiryDate');\n    };\n  }, []);\n  var handleKeyDownExpiryDate = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onKeyDown && props.onKeyDown(e);\n\n      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {\n        cardNumberField.current && cardNumberField.current.focus();\n      }\n    };\n  }, [autoFocus]);\n  var handleKeyPressExpiryDate = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      var formattedExpiryDate = e.target.value || '';\n      var expiryDate = formattedExpiryDate.replace(' / ', '');\n      props.onKeyPress && props.onKeyPress(e);\n\n      if (e.key !== utils.ENTER_KEY_CODE) {\n        if (!utils.validator.isNumeric(e)) {\n          e.preventDefault();\n        }\n\n        if (expiryDate.length >= 4) {\n          e.preventDefault();\n        }\n      }\n    };\n  }, []);\n  var getExpiryDateProps = React.useCallback(function () {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var refKey = _ref3.refKey,\n        props = _objectWithoutProperties(_ref3, [\"refKey\"]);\n\n    return _objectSpread(_defineProperty({\n      'aria-label': 'Expiry date in format MM YY',\n      autoComplete: 'cc-exp',\n      id: 'expiryDate',\n      name: 'expiryDate',\n      placeholder: 'MM/YY',\n      type: 'tel'\n    }, refKey || 'ref', expiryDateField), props, {\n      onBlur: handleBlurExpiryDate(props),\n      onChange: handleChangeExpiryDate(props),\n      onFocus: handleFocusExpiryDate(props),\n      onKeyDown: handleKeyDownExpiryDate(props),\n      onKeyPress: handleKeyPressExpiryDate(props)\n    });\n  }, [handleBlurExpiryDate, handleChangeExpiryDate, handleFocusExpiryDate, handleKeyDownExpiryDate, handleKeyPressExpiryDate]);\n  /** ====== END: EXPIRY DATE STUFF ====== */\n\n  /** ====== START: CVC STUFF ====== */\n\n  var handleBlurCVC = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onBlur && props.onBlur(e);\n      onBlur && onBlur(e);\n      setFocused(undefined);\n      setInputTouched('cvc', true);\n    };\n  }, [onBlur, setInputTouched]);\n  var handleChangeCVC = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        cardType = _ref4.cardType;\n\n    return function (e) {\n      var cvc = e.target.value;\n      setInputTouched('cvc', false);\n      props.onChange && props.onChange(e);\n      onChange && onChange(e);\n      var cvcError = utils.validator.getCVCError(cvc, cvcValidator, {\n        cardType: cardType,\n        errorMessages: errorMessages\n      });\n\n      if (!cvcError && autoFocus) {\n        zipField.current && zipField.current.focus();\n      }\n\n      setInputError('cvc', cvcError);\n      props.onError && props.onError(cvcError);\n    };\n  }, [autoFocus, cvcValidator, errorMessages, onChange, setInputError, setInputTouched]);\n  var handleFocusCVC = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onFocus && props.onFocus(e);\n      setFocused('cvc');\n    };\n  }, []);\n  var handleKeyDownCVC = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onKeyDown && props.onKeyDown(e);\n\n      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {\n        expiryDateField.current && expiryDateField.current.focus();\n      }\n    };\n  }, [autoFocus]);\n  var handleKeyPressCVC = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _ref5 = arguments.length > 1 ? arguments[1] : undefined,\n        cardType = _ref5.cardType;\n\n    return function (e) {\n      var formattedCVC = e.target.value || '';\n      var cvc = formattedCVC.replace(' / ', '');\n      props.onKeyPress && props.onKeyPress(e);\n\n      if (e.key !== utils.ENTER_KEY_CODE) {\n        if (!utils.validator.isNumeric(e)) {\n          e.preventDefault();\n        }\n\n        if (cardType && cvc.length >= cardType.code.length) {\n          e.preventDefault();\n        }\n\n        if (cvc.length >= 4) {\n          e.preventDefault();\n        }\n      }\n    };\n  }, []);\n  var getCVCProps = React.useCallback(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var refKey = _ref6.refKey,\n        props = _objectWithoutProperties(_ref6, [\"refKey\"]);\n\n    return _objectSpread(_defineProperty({\n      'aria-label': 'CVC',\n      autoComplete: 'cc-csc',\n      id: 'cvc',\n      name: 'cvc',\n      placeholder: cardType ? cardType.code.name : 'CVC',\n      type: 'tel'\n    }, refKey || 'ref', cvcField), props, {\n      onBlur: handleBlurCVC(props),\n      onChange: handleChangeCVC(props, {\n        cardType: cardType\n      }),\n      onFocus: handleFocusCVC(props),\n      onKeyDown: handleKeyDownCVC(props),\n      onKeyPress: handleKeyPressCVC(props, {\n        cardType: cardType\n      })\n    });\n  }, [cardType, handleBlurCVC, handleChangeCVC, handleFocusCVC, handleKeyDownCVC, handleKeyPressCVC]);\n  /** ====== END: CVC STUFF ====== */\n\n  /** ====== START: ZIP STUFF ====== */\n\n  var handleBlurZIP = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onBlur && props.onBlur(e);\n      onBlur && onBlur(e);\n      setFocused(undefined);\n      setInputTouched('zip', true);\n    };\n  }, [onBlur, setInputTouched]);\n  var handleChangeZIP = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      var zip = e.target.value;\n      setInputTouched('zip', false);\n      props.onChange && props.onChange(e);\n      onChange && onChange(e);\n      var zipError = utils.validator.getZIPError(zip, {\n        errorMessages: errorMessages\n      });\n      setInputError('zip', zipError);\n      props.onError && props.onError(zipError);\n    };\n  }, [errorMessages, onChange, setInputError, setInputTouched]);\n  var handleFocusZIP = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onFocus && props.onFocus(e);\n      setFocused('zip');\n    };\n  }, []);\n  var handleKeyDownZIP = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onKeyDown && props.onKeyDown(e);\n\n      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {\n        cvcField.current && cvcField.current.focus();\n      }\n    };\n  }, [autoFocus]);\n  var handleKeyPressZIP = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return function (e) {\n      props.onKeyPress && props.onKeyPress(e);\n\n      if (e.key !== utils.ENTER_KEY_CODE) {\n        if (!utils.validator.isNumeric(e)) {\n          e.preventDefault();\n        }\n      }\n    };\n  }, []);\n  var getZIPProps = React.useCallback(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var refKey = _ref7.refKey,\n        props = _objectWithoutProperties(_ref7, [\"refKey\"]);\n\n    return _objectSpread(_defineProperty({\n      autoComplete: 'off',\n      id: 'zip',\n      maxLength: '6',\n      name: 'zip',\n      placeholder: 'ZIP',\n      type: 'tel'\n    }, refKey || 'ref', zipField), props, {\n      onBlur: handleBlurZIP(props),\n      onChange: handleChangeZIP(props),\n      onFocus: handleFocusZIP(props),\n      onKeyDown: handleKeyDownZIP(props),\n      onKeyPress: handleKeyPressZIP(props)\n    });\n  }, [handleBlurZIP, handleChangeZIP, handleFocusZIP, handleKeyDownZIP, handleKeyPressZIP]);\n  /** ====== END: ZIP STUFF ====== */\n\n  /** ====== START: CARD IMAGE STUFF ====== */\n\n  var getCardImageProps = React.useCallback(function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var images = props.images || {};\n    return _objectSpread({\n      'aria-label': cardType ? cardType.displayName : 'Placeholder card',\n      children: images[cardType ? cardType.type : 'placeholder'] || images.placeholder,\n      width: '1.5em',\n      height: '1em',\n      viewBox: '0 0 24 16'\n    }, props);\n  }, [cardType]);\n  /** ====== END: CARD IMAGE STUFF ====== */\n  // Set default field errors\n\n  React.useLayoutEffect(function () {\n    if (zipField.current) {\n      var zipError = utils.validator.getZIPError(zipField.current.value, {\n        errorMessages: errorMessages\n      });\n      setInputError('zip', zipError);\n    }\n\n    if (cvcField.current) {\n      var cvcError = utils.validator.getCVCError(cvcField.current.value, cvcValidator, {\n        errorMessages: errorMessages\n      });\n      setInputError('cvc', cvcError);\n    }\n\n    if (expiryDateField.current) {\n      var expiryDateError = utils.validator.getExpiryDateError(expiryDateField.current.value, expiryValidator, {\n        errorMessages: errorMessages\n      });\n      setInputError('expiryDate', expiryDateError);\n    }\n\n    if (cardNumberField.current) {\n      var cardNumberError = utils.validator.getCardNumberError(cardNumberField.current.value, cardNumberValidator, {\n        errorMessages: errorMessages\n      });\n      setInputError('cardNumber', cardNumberError);\n    }\n  }, [cardNumberValidator, cvcValidator, errorMessages, expiryValidator, setInputError]); // Format default values\n\n  React.useLayoutEffect(function () {\n    if (cardNumberField.current) {\n      cardNumberField.current.value = utils.formatter.formatCardNumber(cardNumberField.current.value);\n    }\n\n    if (expiryDateField.current) {\n      expiryDateField.current.value = utils.formatter.formatExpiry({\n        target: expiryDateField.current\n      });\n    }\n  }, []); // Set default card type\n\n  React.useLayoutEffect(function () {\n    if (cardNumberField.current) {\n      var _cardType = utils.cardTypes.getCardTypeByValue(cardNumberField.current.value);\n\n      setCardType(_cardType);\n    }\n  }, []);\n  return {\n    getCardImageProps: getCardImageProps,\n    getCardNumberProps: getCardNumberProps,\n    getExpiryDateProps: getExpiryDateProps,\n    getCVCProps: getCVCProps,\n    getZIPProps: getZIPProps,\n    wrapperProps: {\n      error: error,\n      focused: focused,\n      isTouched: isTouched\n    },\n    meta: {\n      cardType: cardType,\n      erroredInputs: erroredInputs,\n      error: error,\n      focused: focused,\n      isTouched: isTouched,\n      touchedInputs: touchedInputs\n    }\n  };\n}\n\nexport default usePaymentCard;","map":null,"metadata":{},"sourceType":"module"}